name: release
on:
  # Enable manual triggering of the workflow
  workflow_dispatch:
  push:
    tags:
      - 'v*'  # This will trigger on tags starting with 'v', e.g., 'v1.0.0'
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: apt update && apt install -y gettext-base
      - name: Get major, minor and patch version
        run: |
          # Check if the workflow is triggered by a tag; if not, get the latest tag
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # Remove the 'v' prefix and split the version string into components
            version="${GITHUB_REF#refs/tags/v}"
          else
            # Fetch tags and get the latest one
            git fetch --tags
            version=$(git describe --tags $(git rev-list --tags --max-count=1))
            version="${version#v}"  # Remove 'v' prefix if the tag has it
          fi

          echo "Version: $version"
          # Extract major, minor, and patch versions
          IFS='.' read -r major minor patch <<< "$version"
          # Output the results
          echo "Major version: $major"
          echo "Minor version: $minor"
          echo "Patch version: $patch"
          # Set these as environment variables
          echo "MAJOR_VERSION=$major" >> $GITHUB_ENV
          echo "MINOR_VERSION=$minor" >> $GITHUB_ENV
          echo "PATCH_VERSION=$patch" >> $GITHUB_ENV
      # Write version file
      - name: Write version file
        id: version_file
        run: |
          envsubst < version_file.txt > version_file.txt
          cat version_file.txt
      # Create release notes
      - name: Create release notes
        id: release_note
        run: |
          envsubst < release_notes.md > release_notes.md
          cat release_notes.md
      - name: Upload files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docfiles
          overwrite: true
          if-no-files-found: error
          path: |
            version_file.txt
            release_notes.md
  build:
    needs: setup
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download files as artifact
        uses: actions/download-artifact@v4
        with:
          name: docfiles
          overwrite: true
          if-no-files-found: error
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # Lint with pylint
      - name: Lint with pylint
        run: |
          pylint csv2b64img.py
      # Test with pytest
      - name: Test with pytest
        run: |
          pytest testcsv2b64img.py
      # Build executable
      - name: Build with pyinstaller
        run: |
          pyinstaller --onefile csv2b64img.py --version-file="version_file.txt"
      # Compress executable
      - name: compress executable
        run: |
          Compress-Archive -Path "dist/csv2b64img.exe" -DestinationPath "dist/csv2b64img.zip"
      # Generate SHA256 checksum
      - name: Generate SHA256 checksum
        run: |
          Get-FileHash "dist/csv2b64img.zip" -Algorithm SHA256 | ForEach-Object { $_.Hash } | Out-File -FilePath "dist/csv2b64img.zip.sha256sum"
          echo "SHA_WIN64_ZIP=$(Get-Content dist/csv2b64img.zip.sha256sum)" >> $GITHUB_ENV
      - name: Upload files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: selected-files
          overwrite: true
          if-no-files-found: error
          path: |
            dist/csv2b64img.zip
            dist/csv2b64img.zip.sha256sum
  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download files as artifact
        uses: actions/download-artifact@v4
        with:
          name: selected-files
          overwrite: true
          if-no-files-found: error
          path: |
            ./dist/
      # Create a release on GitHub
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.release_note.outputs.note }}
          draft: false
          prerelease: false
      # Upload compiled assets or package to the release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/csv2b64img.zip  # Adjust to the path of your build artifact
          asset_name: "csv2b64img.zip"  # Name of the uploaded asset
          asset_content_type: application/zip